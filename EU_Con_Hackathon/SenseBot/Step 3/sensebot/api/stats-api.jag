<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var log = new Log("api/stats-api.jag");

var constants = require("/modules/constants.js");
var dcProps = require('/config/dc-props.js').config();
var utility = require("/modules/utility.js").utility;

var result;
var statsClient = new Packages.org.wso2.carbon.device.mgt.iot.usage.statistics.IoTUsageStatisticsClient;

if (uriMatcher.match("/{context}/api/stats")) {

	var deviceId = request.getParameter("deviceId");
	var from = request.getParameter("from");
	var to = request.getParameter("to");

	log.info("deviceId : " + deviceId + " from : " + from + " to : " + to);

	result = getData(getUsername(), deviceId, from, to);

}

// returning the result.
if (result) {
	print(result);
}

function getUsername() {

	var user = session.get(constants.USER_SESSION_KEY);

	if (user) {
		log.info("username: "+ user.username);
		return user.username;
	} else {
		log.info("username is null");
		return null;
	}



}

function getData(user, deviceId, from, to) {

	result = new Object();

	result['sonarData'] = getSensorData("SONAR_SENSOR_SUMMARY","sonar",user, deviceId, from, to);
	result['motionData'] = getSensorData("PIR_MOTION_SENSOR_SUMMARY","motion",user, deviceId, from, to);
	result['lightData'] = getSensorData("LDR_LIGHT_SENSOR_SUMMARY","light",user, deviceId, from, to);
	result['temperatureData'] = getSensorData("DEVICE_TEMPERATURE_SUMMARY","TEMPERATURE",user, deviceId, from, to);

	return result;

}

function getSensorData(table, column, user, deviceId, from, to) {

	var fetchedData = statsClient.getDeviceStats(table, column, user, deviceId, from, to);

	var temperatureData = [];

	for (var i = 0; i < fetchedData.size(); i++) {
		temperatureData.push({
			time: fetchedData.get(i).getTime(),
			value: fetchedData.get(i).getValue()
		});
	}

	return temperatureData;
}

// ------------- Sample data generation -----------------

function getSampleData() {

	result = new Object();

	result['bulbStatusData'] = getBulbStatusSampleData();
	result['fanStatusData'] = getFanStatusSampleData();
	result['temperatureData'] = getTemperatureSampleData();

	return result;
}

function getBulbStatusSampleData(from, to) {

	var bulbStatusData = [];

	for (var i = 0; i < 100; i++) {
		bulbStatusData.push({
			time: Date.now() + (i * 1000),
			value: Math.floor((Math.random() * 100) + 1) % 2 == 0 ? 'ON' : 'OFF'});
    }

    return bulbStatusData;
};


function getFanStatusSampleData(from, to) {

    var fanStatusData = [];

    for (var i = 0; i < 100; i++) {
        fanStatusData.push({time: Date.now() + (i * 1000), value: Math.floor((Math.random() * 100) + 1) % 2 == 0 ? 'ON' : 'OFF'});
    }

    return fanStatusData;
}

function getTemperatureSampleData(from, to) {

    var temperatureData = [];

    for (var i = 0; i < 100; i++) {
        temperatureData.push({time: Date.now() + (i * 1000), value: Math.random() * 100});
    }

    return temperatureData;
}


%>